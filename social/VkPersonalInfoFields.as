package social {
	/**
	 * ...
	 * @author Andrew Rahimov
	 */
	public final class VkPersonalInfoFields {
		
		/*
		 * Имя пользователя в именительном падеже
		 *
		 * */
		public static const FIRST_NAME:String = "first_name";
		
		/*
		 * Фамилия пользователя в именительном падеже
		 *
		 * */
		public static const LAST_NAME:String = "last_name";
		
		/*
		 * 1 - женский
		 * 2 - мужской
		 * 0 - пол не указан
		 *
		 * */
		public static const SEX:String = "sex";
		
		/*
		 * Дата рождения пользователя. Возвращается в формате DD.MM.YYYY или DD.MM (если год рождения скрыт).
		 * Если дата рождения скрыта целиком, то при приёме данных в формате XML
		 * соответствующий узел <user> не содержит тег <bdate>
		 *
		 * */
		public static const BIRTH_DATE:String = "bdate";
		
		/*
		 * Идентификатор города, указанного на странице пользователя в разделе «Контакты».
		 * Возвращается id города, который можно использовать для получения его названия
		 * с помощью метода places.getCityById. Если город не указан, или
		 * основная информация страницы скрыта настройками приватности, возвращается 0.
		 *
		 * */
		public static const CITY:String = "city";
		
		/*
		 * Идентификатор страны, указанной на странице пользователя в разделе «Контакты».
		 * Возвращается id страны, который можно использовать для получения ее названия
		 * с помощью метода places.getCountries. Если страна не указана, возвращается 0.
		 *
		 * */
		public static const COUNTRY:String = "country";
		
		/*
		 * Возвращается url квадратной фотографии пользователя, имеющей ширину 50 пикселей.
		 * В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_c.gif
		 *
		 * */
		public static const PHOTO_50X50:String = "photo_50";
		
		/*
		 * Возвращается url квадратной фотографии пользователя, имеющей ширину 100 пикселей.
		 * В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_b.gif
		 *
		 * */
		public static const PHOTO_100X100:String = "photo_100";
		
		/*
		 * Возвращается url фотографии пользователя, имеющей ширину 200 пикселей.
		 * В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_a.gif
		 *
		 * */
		public static const PHOTO_200X200:String = "photo_200_orig";
		
		/*
		 * Возвращается url квадратной фотографии пользователя, имеющей ширину 200 пикселей.
		 * Если фотография была загружена давно, изображения с такими размерами может не быть,
		 * в этом случае ответ не будет содержать этого поля.
		 *
		 * */
		public static const PHOTO_200X200_SQUARE:String = "photo_200";
		
		/*
		 * Возвращается url фотографии пользователя, имеющей ширину 400 пикселей.
		 * Если у пользователя отсутствует фотография такого размера, ответ не будет содержать этого поля.
		 *
		 * */
		public static const PHOTO_400X400:String = "photo_400_orig";
		
		/*
		 * Возвращается url фотографии пользователя максимального размера.
		 * Может быть возвращена фотография, имеющая ширину как 400, так и 200 пикселей.
		 * В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_a.gif
		 *
		 * */
		public static const PHOTO_ORIGINAL:String = "photo_max_orig";
		
		/*
		 * Возвращается url квадратной фотографии пользователя с максимальной шириной.
		 * Может быть возвращена фотография, имеющая ширину как 200, так и 100 пикселей.
		 * В случае отсутствия у пользователя фотографии возвращается http://vk.com/images/camera_b.gif
		 *
		 * */
		public static const PHOTO_ORIGINAL_SQUARE:String = "photo_max";
		
		/*
		 * Информация о том, находится ли пользователь сейчас на сайте.
		 * Возвращаемые значения: 1 — находится, 0 — не находится.
		 * Если пользователь использует мобильное приложение либо мобильную версию сайта,
		 * возвращается дополнительное поле online_mobile, содержащее 1.
		 * При этом, если используется именно приложение, дополнительно возвращается поле online_app, содержащее его идентификатор.
		 *
		 * */
		public static const ONLINE:String = "online";
		
		/*
		 * Короткий адрес страницы. Возвращается строка, содержащая
		 * короткий адрес страницы (возвращается только сам поддомен, например andrew).
		 * Если он не назначен, возвращается "id'+uid, например, id35828305.
		 *
		 * */
		public static const NICKNAME_LINK:String = "screen_name";
		
		/*
		 * Статус пользователя. Возвращается строка,
		 * содержащая текст статуса, расположенного в профиле под именем пользователя.
		 *
		 * */
		public static const STATUS_TEXT:String = "status";
		
		/*
		 * Семейное положение пользователя.
		 * Возвращаемые значения:
		 * 1 — не женат/не замужем;
		 * 2 — есть друг/есть подруга;
		 * 3 — помолвлен/помолвлена;
		 * 4 — женат/замужем:
		 * 5 — всё сложно;
		 * 6 — в активном поиске;
		 * 7 — влюблён/влюблена.
		 *
		 * */
		public static const RELATIONSHIP:String = "relation";
		
		/*
		 * Никнейм пользователя. Возвращается только в том случае, если запрашивается информация об одном профиле.
		 * Если никнейм отсутствует, то при приёме данных в формате XML узел <user> содержит пустой тег <nickname/>.
		 *
		 * */
		public static const NICKNAME:String = "nickname";
		
	}
}
